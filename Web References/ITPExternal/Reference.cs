// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ITPiPadSoln.ITPExternal {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="wbsITP_ExternalSoap", Namespace="http://scms.silcar.com.au/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wbsITP_External : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CookieLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserLoggedInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubcontractorITPsForDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPDownloadInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullQuestionnaireInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullITPTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPBatteryFuseTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPValidHierarchyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullDocumentSectionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPStaticTableVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectQuestionnaireInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectSection10InfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectRFUInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectBatteryAcceptTestInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPInventoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsITPUploadableOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPUploadInfoOperationCompleted;
        
        public wbsITP_External() {
            this.Url = "http://silcar-ws11.silcar.com.au:8003/wbsITP_External.asmx";
        }
        
        public wbsITP_External(string url) {
            this.Url = url;
        }
        
        public event CookieLoginCompletedEventHandler CookieLoginCompleted;
        
        public event IsUserLoggedInCompletedEventHandler IsUserLoggedInCompleted;
        
        public event GetSubcontractorITPsForDownloadCompletedEventHandler GetSubcontractorITPsForDownloadCompleted;
        
        public event GetITPDownloadInfoCompletedEventHandler GetITPDownloadInfoCompleted;
        
        public event SetITPStatusCompletedEventHandler SetITPStatusCompleted;
        
        public event GetITPFullQuestionnaireInfoCompletedEventHandler GetITPFullQuestionnaireInfoCompleted;
        
        public event GetITPFullITPTypeInfoCompletedEventHandler GetITPFullITPTypeInfoCompleted;
        
        public event GetITPBatteryFuseTypeInfoCompletedEventHandler GetITPBatteryFuseTypeInfoCompleted;
        
        public event GetITPValidHierarchyInfoCompletedEventHandler GetITPValidHierarchyInfoCompleted;
        
        public event GetITPFullDocumentSectionInfoCompletedEventHandler GetITPFullDocumentSectionInfoCompleted;
        
        public event GetITPStaticTableVersionNumberCompletedEventHandler GetITPStaticTableVersionNumberCompleted;
        
        public event GetITPProjectQuestionnaireInfoCompletedEventHandler GetITPProjectQuestionnaireInfoCompleted;
        
        public event GetITPProjectSection10InfoCompletedEventHandler GetITPProjectSection10InfoCompleted;
        
        public event GetITPProjectRFUInfoCompletedEventHandler GetITPProjectRFUInfoCompleted;
        
        public event GetITPProjectBatteryAcceptTestInfoCompletedEventHandler GetITPProjectBatteryAcceptTestInfoCompleted;
        
        public event GetITPInventoryInfoCompletedEventHandler GetITPInventoryInfoCompleted;
        
        public event IsITPUploadableCompletedEventHandler IsITPUploadableCompleted;
        
        public event SetITPUploadInfoCompletedEventHandler SetITPUploadInfoCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/CookieLogin", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CookieLogin(string sUsername, string sPassword) {
            object[] results = this.Invoke("CookieLogin", new object[] {
                        sUsername,
                        sPassword});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginCookieLogin(string sUsername, string sPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CookieLogin", new object[] {
                        sUsername,
                        sPassword}, callback, asyncState);
        }
        
        public string EndCookieLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void CookieLoginAsync(string sUsername, string sPassword) {
            this.CookieLoginAsync(sUsername, sPassword, null);
        }
        
        public void CookieLoginAsync(string sUsername, string sPassword, object userState) {
            if ((this.CookieLoginOperationCompleted == null)) {
                this.CookieLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCookieLoginCompleted);
            }
            this.InvokeAsync("CookieLogin", new object[] {
                        sUsername,
                        sPassword}, this.CookieLoginOperationCompleted, userState);
        }
        
        private void OnCookieLoginCompleted(object arg) {
            if ((this.CookieLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CookieLoginCompleted(this, new CookieLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/IsUserLoggedIn", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] IsUserLoggedIn(string sSessionId, string sUsername) {
            object[] results = this.Invoke("IsUserLoggedIn", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginIsUserLoggedIn(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsUserLoggedIn", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndIsUserLoggedIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void IsUserLoggedInAsync(string sSessionId, string sUsername) {
            this.IsUserLoggedInAsync(sSessionId, sUsername, null);
        }
        
        public void IsUserLoggedInAsync(string sSessionId, string sUsername, object userState) {
            if ((this.IsUserLoggedInOperationCompleted == null)) {
                this.IsUserLoggedInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserLoggedInCompleted);
            }
            this.InvokeAsync("IsUserLoggedIn", new object[] {
                        sSessionId,
                        sUsername}, this.IsUserLoggedInOperationCompleted, userState);
        }
        
        private void OnIsUserLoggedInCompleted(object arg) {
            if ((this.IsUserLoggedInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserLoggedInCompleted(this, new IsUserLoggedInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetSubcontractorITPsForDownload", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetSubcontractorITPsForDownload(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetSubcontractorITPsForDownload", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetSubcontractorITPsForDownload(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubcontractorITPsForDownload", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetSubcontractorITPsForDownload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetSubcontractorITPsForDownloadAsync(string sSessionId, string sUsername) {
            this.GetSubcontractorITPsForDownloadAsync(sSessionId, sUsername, null);
        }
        
        public void GetSubcontractorITPsForDownloadAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetSubcontractorITPsForDownloadOperationCompleted == null)) {
                this.GetSubcontractorITPsForDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubcontractorITPsForDownloadCompleted);
            }
            this.InvokeAsync("GetSubcontractorITPsForDownload", new object[] {
                        sSessionId,
                        sUsername}, this.GetSubcontractorITPsForDownloadOperationCompleted, userState);
        }
        
        private void OnGetSubcontractorITPsForDownloadCompleted(object arg) {
            if ((this.GetSubcontractorITPsForDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubcontractorITPsForDownloadCompleted(this, new GetSubcontractorITPsForDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPDownloadInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPDownloadInfo(string sSessionId, string sUsername, string sID) {
            object[] results = this.Invoke("GetITPDownloadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sID});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPDownloadInfo(string sSessionId, string sUsername, string sID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPDownloadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sID}, callback, asyncState);
        }
        
        public object[] EndGetITPDownloadInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPDownloadInfoAsync(string sSessionId, string sUsername, string sID) {
            this.GetITPDownloadInfoAsync(sSessionId, sUsername, sID, null);
        }
        
        public void GetITPDownloadInfoAsync(string sSessionId, string sUsername, string sID, object userState) {
            if ((this.GetITPDownloadInfoOperationCompleted == null)) {
                this.GetITPDownloadInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPDownloadInfoCompleted);
            }
            this.InvokeAsync("GetITPDownloadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sID}, this.GetITPDownloadInfoOperationCompleted, userState);
        }
        
        private void OnGetITPDownloadInfoCompleted(object arg) {
            if ((this.GetITPDownloadInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPDownloadInfoCompleted(this, new GetITPDownloadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPStatus", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] SetITPStatus(string sSessionId, string sUsername, string sID, int iStatus) {
            object[] results = this.Invoke("SetITPStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        iStatus});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginSetITPStatus(string sSessionId, string sUsername, string sID, int iStatus, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetITPStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        iStatus}, callback, asyncState);
        }
        
        public object[] EndSetITPStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void SetITPStatusAsync(string sSessionId, string sUsername, string sID, int iStatus) {
            this.SetITPStatusAsync(sSessionId, sUsername, sID, iStatus, null);
        }
        
        public void SetITPStatusAsync(string sSessionId, string sUsername, string sID, int iStatus, object userState) {
            if ((this.SetITPStatusOperationCompleted == null)) {
                this.SetITPStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPStatusCompleted);
            }
            this.InvokeAsync("SetITPStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        iStatus}, this.SetITPStatusOperationCompleted, userState);
        }
        
        private void OnSetITPStatusCompleted(object arg) {
            if ((this.SetITPStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPStatusCompleted(this, new SetITPStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullQuestionnaireInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPFullQuestionnaireInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPFullQuestionnaireInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPFullQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPFullQuestionnaireInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPFullQuestionnaireInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullQuestionnaireInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPFullQuestionnaireInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullQuestionnaireInfoOperationCompleted == null)) {
                this.GetITPFullQuestionnaireInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullQuestionnaireInfoCompleted);
            }
            this.InvokeAsync("GetITPFullQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullQuestionnaireInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullQuestionnaireInfoCompleted(object arg) {
            if ((this.GetITPFullQuestionnaireInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullQuestionnaireInfoCompleted(this, new GetITPFullQuestionnaireInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullITPTypeInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPFullITPTypeInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullITPTypeInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPFullITPTypeInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPFullITPTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPFullITPTypeInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPFullITPTypeInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullITPTypeInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPFullITPTypeInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullITPTypeInfoOperationCompleted == null)) {
                this.GetITPFullITPTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullITPTypeInfoCompleted);
            }
            this.InvokeAsync("GetITPFullITPTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullITPTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullITPTypeInfoCompleted(object arg) {
            if ((this.GetITPFullITPTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullITPTypeInfoCompleted(this, new GetITPFullITPTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPBatteryFuseTypeInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPBatteryFuseTypeInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPBatteryFuseTypeInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPBatteryFuseTypeInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPBatteryFuseTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPBatteryFuseTypeInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPBatteryFuseTypeInfoAsync(string sSessionId, string sUsername) {
            this.GetITPBatteryFuseTypeInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPBatteryFuseTypeInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPBatteryFuseTypeInfoOperationCompleted == null)) {
                this.GetITPBatteryFuseTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPBatteryFuseTypeInfoCompleted);
            }
            this.InvokeAsync("GetITPBatteryFuseTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPBatteryFuseTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetITPBatteryFuseTypeInfoCompleted(object arg) {
            if ((this.GetITPBatteryFuseTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPBatteryFuseTypeInfoCompleted(this, new GetITPBatteryFuseTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPValidHierarchyInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPValidHierarchyInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPValidHierarchyInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPValidHierarchyInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPValidHierarchyInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPValidHierarchyInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPValidHierarchyInfoAsync(string sSessionId, string sUsername) {
            this.GetITPValidHierarchyInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPValidHierarchyInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPValidHierarchyInfoOperationCompleted == null)) {
                this.GetITPValidHierarchyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPValidHierarchyInfoCompleted);
            }
            this.InvokeAsync("GetITPValidHierarchyInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPValidHierarchyInfoOperationCompleted, userState);
        }
        
        private void OnGetITPValidHierarchyInfoCompleted(object arg) {
            if ((this.GetITPValidHierarchyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPValidHierarchyInfoCompleted(this, new GetITPValidHierarchyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullDocumentSectionInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPFullDocumentSectionInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullDocumentSectionInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPFullDocumentSectionInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPFullDocumentSectionInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPFullDocumentSectionInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPFullDocumentSectionInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullDocumentSectionInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPFullDocumentSectionInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullDocumentSectionInfoOperationCompleted == null)) {
                this.GetITPFullDocumentSectionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullDocumentSectionInfoCompleted);
            }
            this.InvokeAsync("GetITPFullDocumentSectionInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullDocumentSectionInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullDocumentSectionInfoCompleted(object arg) {
            if ((this.GetITPFullDocumentSectionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullDocumentSectionInfoCompleted(this, new GetITPFullDocumentSectionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPStaticTableVersionNumber", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPStaticTableVersionNumber(string sSessionId, string sUsername, string sTableName) {
            object[] results = this.Invoke("GetITPStaticTableVersionNumber", new object[] {
                        sSessionId,
                        sUsername,
                        sTableName});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPStaticTableVersionNumber(string sSessionId, string sUsername, string sTableName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPStaticTableVersionNumber", new object[] {
                        sSessionId,
                        sUsername,
                        sTableName}, callback, asyncState);
        }
        
        public object[] EndGetITPStaticTableVersionNumber(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPStaticTableVersionNumberAsync(string sSessionId, string sUsername, string sTableName) {
            this.GetITPStaticTableVersionNumberAsync(sSessionId, sUsername, sTableName, null);
        }
        
        public void GetITPStaticTableVersionNumberAsync(string sSessionId, string sUsername, string sTableName, object userState) {
            if ((this.GetITPStaticTableVersionNumberOperationCompleted == null)) {
                this.GetITPStaticTableVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPStaticTableVersionNumberCompleted);
            }
            this.InvokeAsync("GetITPStaticTableVersionNumber", new object[] {
                        sSessionId,
                        sUsername,
                        sTableName}, this.GetITPStaticTableVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetITPStaticTableVersionNumberCompleted(object arg) {
            if ((this.GetITPStaticTableVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPStaticTableVersionNumberCompleted(this, new GetITPStaticTableVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectQuestionnaireInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPProjectQuestionnaireInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPProjectQuestionnaireInfo(string sSessionId, string sUsername, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPProjectQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, callback, asyncState);
        }
        
        public object[] EndGetITPProjectQuestionnaireInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPProjectQuestionnaireInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectQuestionnaireInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        public void GetITPProjectQuestionnaireInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectQuestionnaireInfoOperationCompleted == null)) {
                this.GetITPProjectQuestionnaireInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectQuestionnaireInfoCompleted);
            }
            this.InvokeAsync("GetITPProjectQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectQuestionnaireInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectQuestionnaireInfoCompleted(object arg) {
            if ((this.GetITPProjectQuestionnaireInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectQuestionnaireInfoCompleted(this, new GetITPProjectQuestionnaireInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectSection10Info", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPProjectSection10Info(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectSection10Info", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPProjectSection10Info(string sSessionId, string sUsername, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPProjectSection10Info", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, callback, asyncState);
        }
        
        public object[] EndGetITPProjectSection10Info(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPProjectSection10InfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectSection10InfoAsync(sSessionId, sUsername, sId, null);
        }
        
        public void GetITPProjectSection10InfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectSection10InfoOperationCompleted == null)) {
                this.GetITPProjectSection10InfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectSection10InfoCompleted);
            }
            this.InvokeAsync("GetITPProjectSection10Info", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectSection10InfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectSection10InfoCompleted(object arg) {
            if ((this.GetITPProjectSection10InfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectSection10InfoCompleted(this, new GetITPProjectSection10InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectRFUInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPProjectRFUInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectRFUInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPProjectRFUInfo(string sSessionId, string sUsername, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPProjectRFUInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, callback, asyncState);
        }
        
        public object[] EndGetITPProjectRFUInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPProjectRFUInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectRFUInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        public void GetITPProjectRFUInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectRFUInfoOperationCompleted == null)) {
                this.GetITPProjectRFUInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectRFUInfoCompleted);
            }
            this.InvokeAsync("GetITPProjectRFUInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectRFUInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectRFUInfoCompleted(object arg) {
            if ((this.GetITPProjectRFUInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectRFUInfoCompleted(this, new GetITPProjectRFUInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectBatteryAcceptTestInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPProjectBatteryAcceptTestInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectBatteryAcceptTestInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPProjectBatteryAcceptTestInfo(string sSessionId, string sUsername, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPProjectBatteryAcceptTestInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, callback, asyncState);
        }
        
        public object[] EndGetITPProjectBatteryAcceptTestInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPProjectBatteryAcceptTestInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectBatteryAcceptTestInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        public void GetITPProjectBatteryAcceptTestInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectBatteryAcceptTestInfoOperationCompleted == null)) {
                this.GetITPProjectBatteryAcceptTestInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectBatteryAcceptTestInfoCompleted);
            }
            this.InvokeAsync("GetITPProjectBatteryAcceptTestInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectBatteryAcceptTestInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectBatteryAcceptTestInfoCompleted(object arg) {
            if ((this.GetITPProjectBatteryAcceptTestInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectBatteryAcceptTestInfoCompleted(this, new GetITPProjectBatteryAcceptTestInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPInventoryInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] GetITPInventoryInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPInventoryInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetITPInventoryInfo(string sSessionId, string sUsername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetITPInventoryInfo", new object[] {
                        sSessionId,
                        sUsername}, callback, asyncState);
        }
        
        public object[] EndGetITPInventoryInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void GetITPInventoryInfoAsync(string sSessionId, string sUsername) {
            this.GetITPInventoryInfoAsync(sSessionId, sUsername, null);
        }
        
        public void GetITPInventoryInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPInventoryInfoOperationCompleted == null)) {
                this.GetITPInventoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPInventoryInfoCompleted);
            }
            this.InvokeAsync("GetITPInventoryInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPInventoryInfoOperationCompleted, userState);
        }
        
        private void OnGetITPInventoryInfoCompleted(object arg) {
            if ((this.GetITPInventoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPInventoryInfoCompleted(this, new GetITPInventoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/IsITPUploadable", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] IsITPUploadable(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("IsITPUploadable", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginIsITPUploadable(string sSessionId, string sUsername, string sId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsITPUploadable", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, callback, asyncState);
        }
        
        public object[] EndIsITPUploadable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void IsITPUploadableAsync(string sSessionId, string sUsername, string sId) {
            this.IsITPUploadableAsync(sSessionId, sUsername, sId, null);
        }
        
        public void IsITPUploadableAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.IsITPUploadableOperationCompleted == null)) {
                this.IsITPUploadableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsITPUploadableCompleted);
            }
            this.InvokeAsync("IsITPUploadable", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.IsITPUploadableOperationCompleted, userState);
        }
        
        private void OnIsITPUploadableCompleted(object arg) {
            if ((this.IsITPUploadableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsITPUploadableCompleted(this, new IsITPUploadableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPUploadInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public object[] SetITPUploadInfo(string sSessionId, string sUsername, string sSendString) {
            object[] results = this.Invoke("SetITPUploadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString});
            return ((object[])(results[0]));
        }
        
        public System.IAsyncResult BeginSetITPUploadInfo(string sSessionId, string sUsername, string sSendString, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetITPUploadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString}, callback, asyncState);
        }
        
        public object[] EndSetITPUploadInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        public void SetITPUploadInfoAsync(string sSessionId, string sUsername, string sSendString) {
            this.SetITPUploadInfoAsync(sSessionId, sUsername, sSendString, null);
        }
        
        public void SetITPUploadInfoAsync(string sSessionId, string sUsername, string sSendString, object userState) {
            if ((this.SetITPUploadInfoOperationCompleted == null)) {
                this.SetITPUploadInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPUploadInfoCompleted);
            }
            this.InvokeAsync("SetITPUploadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString}, this.SetITPUploadInfoOperationCompleted, userState);
        }
        
        private void OnSetITPUploadInfoCompleted(object arg) {
            if ((this.SetITPUploadInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPUploadInfoCompleted(this, new SetITPUploadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class CookieLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CookieLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void CookieLoginCompletedEventHandler(object sender, CookieLoginCompletedEventArgs args);
    
    public partial class IsUserLoggedInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserLoggedInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void IsUserLoggedInCompletedEventHandler(object sender, IsUserLoggedInCompletedEventArgs args);
    
    public partial class GetSubcontractorITPsForDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubcontractorITPsForDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetSubcontractorITPsForDownloadCompletedEventHandler(object sender, GetSubcontractorITPsForDownloadCompletedEventArgs args);
    
    public partial class GetITPDownloadInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPDownloadInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPDownloadInfoCompletedEventHandler(object sender, GetITPDownloadInfoCompletedEventArgs args);
    
    public partial class SetITPStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void SetITPStatusCompletedEventHandler(object sender, SetITPStatusCompletedEventArgs args);
    
    public partial class GetITPFullQuestionnaireInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullQuestionnaireInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPFullQuestionnaireInfoCompletedEventHandler(object sender, GetITPFullQuestionnaireInfoCompletedEventArgs args);
    
    public partial class GetITPFullITPTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullITPTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPFullITPTypeInfoCompletedEventHandler(object sender, GetITPFullITPTypeInfoCompletedEventArgs args);
    
    public partial class GetITPBatteryFuseTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPBatteryFuseTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPBatteryFuseTypeInfoCompletedEventHandler(object sender, GetITPBatteryFuseTypeInfoCompletedEventArgs args);
    
    public partial class GetITPValidHierarchyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPValidHierarchyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPValidHierarchyInfoCompletedEventHandler(object sender, GetITPValidHierarchyInfoCompletedEventArgs args);
    
    public partial class GetITPFullDocumentSectionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullDocumentSectionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPFullDocumentSectionInfoCompletedEventHandler(object sender, GetITPFullDocumentSectionInfoCompletedEventArgs args);
    
    public partial class GetITPStaticTableVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPStaticTableVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPStaticTableVersionNumberCompletedEventHandler(object sender, GetITPStaticTableVersionNumberCompletedEventArgs args);
    
    public partial class GetITPProjectQuestionnaireInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectQuestionnaireInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPProjectQuestionnaireInfoCompletedEventHandler(object sender, GetITPProjectQuestionnaireInfoCompletedEventArgs args);
    
    public partial class GetITPProjectSection10InfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectSection10InfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPProjectSection10InfoCompletedEventHandler(object sender, GetITPProjectSection10InfoCompletedEventArgs args);
    
    public partial class GetITPProjectRFUInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectRFUInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPProjectRFUInfoCompletedEventHandler(object sender, GetITPProjectRFUInfoCompletedEventArgs args);
    
    public partial class GetITPProjectBatteryAcceptTestInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectBatteryAcceptTestInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPProjectBatteryAcceptTestInfoCompletedEventHandler(object sender, GetITPProjectBatteryAcceptTestInfoCompletedEventArgs args);
    
    public partial class GetITPInventoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPInventoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetITPInventoryInfoCompletedEventHandler(object sender, GetITPInventoryInfoCompletedEventArgs args);
    
    public partial class IsITPUploadableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsITPUploadableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void IsITPUploadableCompletedEventHandler(object sender, IsITPUploadableCompletedEventArgs args);
    
    public partial class SetITPUploadInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPUploadInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    public delegate void SetITPUploadInfoCompletedEventHandler(object sender, SetITPUploadInfoCompletedEventArgs args);
}
